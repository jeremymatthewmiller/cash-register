/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cash.register;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;

public class CashRegisterTest {

    private CashRegister cashRegister = new CashRegister();

    @ParameterizedTest
    @ValueSource(strings = {"1", "2", "20", "33"})
    void isIntegerShouldReturnTrueWhenStringIsAnInteger(final String value) {
        final boolean result = cashRegister.isInteger(value);

        assertThat(result).isTrue();
    }

    @ParameterizedTest
    @ValueSource(strings = {"", "one", "ten", "123word", "44.4", "0.00001"})
    void isIntegerShouldReturnFalseWhenStringIsNotAnInteger(final String value) {
        final boolean result = cashRegister.isInteger(value);

        assertThat(result).isFalse();
    }

    @Test
    void isChangeCommandValidShouldReturnTrueForValidCommand() {
        String[] changeCommand = {"change", "11"};

        final boolean result = cashRegister.isChangeCommandValid(changeCommand);

        assertThat(result).isTrue();
    }

    @Test
    void isChangeCommandValidShouldReturnFalseForInvalidCommand() {
        String[] changeCommand = {"change", "1", "2"};
        final boolean result = cashRegister.isChangeCommandValid(changeCommand);

        assertThat(result).isFalse();

        String[] changeCommand2 = {"change"};
        final boolean result2 = cashRegister.isChangeCommandValid(changeCommand2);

        assertThat(result2).isFalse();
    }

    @Test
    void isPutCommandValidShouldReturnTrueForValidCommand() {
        String[] putCommand = {"put", "1", "2", "3", "4", "5"};

        final boolean result = cashRegister.isPutCommandValid(putCommand);

        assertThat(result).isTrue();
    }

    @Test
    void isPutCommandValidShouldReturnFalseForInvalidCommand() {
        String[] putCommand = {"put", "1", "2", "3"};

        final boolean result = cashRegister.isPutCommandValid(putCommand);

        assertThat(result).isFalse();
    }

    @Test
    void isTakeCommandValidShouldReturnTrueForValidCommand() {
        String[] takeCommand = {"take", "1", "2", "3", "4", "5"};

        final boolean result = cashRegister.isTakeCommandValid(takeCommand);

        assertThat(result).isTrue();
    }

    @Test
    void isTakeCommandValidShouldReturnFalseForInvalidCommand() {
        String[] takeCommand = {"put", "1", "2", "3", "4", "five"};

        final boolean result = cashRegister.isTakeCommandValid(takeCommand);

        assertThat(result).isFalse();
    }

    @Test
    void isShowCommandValidShouldReturnTrueForValidCommand() {
        String[] showCommand = {"show"};

        final boolean result = cashRegister.isShowCommandValid(showCommand);

        assertThat(result).isTrue();
    }

    @Test
    void isShowCommandValidShouldReturnFalseForInvalidCommand() {
        String[] showCommand = {"show", "1", "2"};

        final boolean result = cashRegister.isShowCommandValid(showCommand);

        assertThat(result).isFalse();
    }

    @ParameterizedTest
    @ValueSource(strings = {"show", "put 1 2 3 4 5", "take 1 2 3 4 5", "change 1"})
    void isCommandValidShouldReturnTrueForValidCommand(final String command) {
        final boolean result = cashRegister.isCommandValid(command);

        assertThat(result).isTrue();
    }

    @ParameterizedTest
    @ValueSource(strings = {"", "tacos", "tacos 1 2 3", "change 1 2 3 4 5 6", "take 1 2 3"})
    @NullSource
    void isCommandValidShouldReturnFalseForInvalidCommand(final String command) {
        final boolean result = cashRegister.isCommandValid(command);

        assertThat(result).isFalse();
    }

    private Map<Currency, Integer> createRegister() {
        return Map.of(Currency.TWENTY, Integer.valueOf(1),
            Currency.TEN, Integer.valueOf(2),
            Currency.FIVE, Integer.valueOf(3),
            Currency.TWO, Integer.valueOf(4),
            Currency.ONE, Integer.valueOf(5));
    }

    @Test
    void calculateRegisterTotalShouldCalculateTheRegisterTotal() {

        final int result = cashRegister.calculateRegisterTotal(this.createRegister());

        assertThat(result).isEqualTo(68);
    }

    @Test
    void getCountByDenominationShouldDisplayRegisterContentsByDenomination() {
        final String expected = " 1 2 3 4 5";

        final String result = cashRegister.getCountByDenomination(this.createRegister());

        assertThat(result).isEqualTo(expected);
    }

    private Map<Currency, Integer> createMutableRegister() {
        Map<Currency, Integer> register = new HashMap<>();
        register.put(Currency.TWENTY, Integer.valueOf(1));
        register.put(Currency.TEN, Integer.valueOf(2));
        register.put(Currency.FIVE, Integer.valueOf(3));
        register.put(Currency.TWO, Integer.valueOf(4));
        register.put(Currency.ONE, Integer.valueOf(5));

        return register;
    }

    @Test
    void performPutActionShouldAddAmountsToRegister() {
        String[] putCommand = {"put", "5", "4", "3", "2", "1"};
        Map<Currency, Integer> register = this.createMutableRegister();

        cashRegister.performPutAction(putCommand, register);

        assertThat(register.get(Currency.TWENTY)).isEqualTo(Integer.valueOf(6));
        assertThat(register.get(Currency.TEN)).isEqualTo(Integer.valueOf(6));
        assertThat(register.get(Currency.FIVE)).isEqualTo(Integer.valueOf(6));
        assertThat(register.get(Currency.TWO)).isEqualTo(Integer.valueOf(6));
        assertThat(register.get(Currency.ONE)).isEqualTo(Integer.valueOf(6));
    }

    @Test
    void performTakeActionShouldDeductAmountsFromRegister() {
        String[] takeCommand = {"take", "5", "4", "3", "2", "1"};
        Map<Currency, Integer> register = this.createMutableRegister();

        cashRegister.performTakeAction(takeCommand, register);

        assertThat(register.get(Currency.TWENTY)).isEqualTo(Integer.valueOf(0));
        assertThat(register.get(Currency.TEN)).isEqualTo(Integer.valueOf(0));
        assertThat(register.get(Currency.FIVE)).isEqualTo(Integer.valueOf(0));
        assertThat(register.get(Currency.TWO)).isEqualTo(Integer.valueOf(2));
        assertThat(register.get(Currency.ONE)).isEqualTo(Integer.valueOf(4));
    }

    @Test
    void performChangeActionShouldMakeCorrectChangeAndDeductTheResultFromTheRegister() {
        String[] changeCommand = {"change", "11"};
        Map<Currency, Integer> register = new HashMap<>();
        register.put(Currency.TWENTY, Integer.valueOf(1));
        register.put(Currency.TEN, Integer.valueOf(0));
        register.put(Currency.FIVE, Integer.valueOf(3));
        register.put(Currency.TWO, Integer.valueOf(4));
        register.put(Currency.ONE, Integer.valueOf(0));

        cashRegister.performChangeAction(changeCommand, register);

        assertThat(register.get(Currency.TWENTY)).isEqualTo(Integer.valueOf(1));
        assertThat(register.get(Currency.TEN)).isEqualTo(Integer.valueOf(0));
        assertThat(register.get(Currency.FIVE)).isEqualTo(Integer.valueOf(2));
        assertThat(register.get(Currency.TWO)).isEqualTo(Integer.valueOf(1));
        assertThat(register.get(Currency.ONE)).isEqualTo(Integer.valueOf(0));
    }

    @Test
    void performChangeActionShouldNotRemoveAnyBillsFromTheRegisterWhenChangeCannotBeMade() {
        String[] changeCommand = {"change", "99"};
        Map<Currency, Integer> register = new HashMap<>();
        register.put(Currency.TWENTY, Integer.valueOf(1));
        register.put(Currency.TEN, Integer.valueOf(0));
        register.put(Currency.FIVE, Integer.valueOf(3));
        register.put(Currency.TWO, Integer.valueOf(4));
        register.put(Currency.ONE, Integer.valueOf(0));

        cashRegister.performChangeAction(changeCommand, register);

        assertThat(register.get(Currency.TWENTY)).isEqualTo(Integer.valueOf(1));
        assertThat(register.get(Currency.TEN)).isEqualTo(Integer.valueOf(0));
        assertThat(register.get(Currency.FIVE)).isEqualTo(Integer.valueOf(3));
        assertThat(register.get(Currency.TWO)).isEqualTo(Integer.valueOf(4));
        assertThat(register.get(Currency.ONE)).isEqualTo(Integer.valueOf(0));
    }

    @Test
    void initializeRegisterShouldCreateRegisterWithZeroBillCounts() {
        Map<Currency, Integer> result = cashRegister.initializeRegister();

        assertThat(result.get(Currency.TWENTY)).isEqualTo(Integer.valueOf(0));
        assertThat(result.get(Currency.TEN)).isEqualTo(Integer.valueOf(0));
        assertThat(result.get(Currency.FIVE)).isEqualTo(Integer.valueOf(0));
        assertThat(result.get(Currency.TWO)).isEqualTo(Integer.valueOf(0));
        assertThat(result.get(Currency.ONE)).isEqualTo(Integer.valueOf(0));
    }

    @Test
    void convertCashRegisterMapToArrayShouldTakeValuesFromRegisterMapAndPlaceThemIntoList() {
        Map<Currency, Integer> register = createRegister();

        final int[] result = cashRegister.convertCashRegisterToArray(register);

        assertThat(result).containsExactlyInAnyOrder(1,1,1,1,1,2,2,2,2,5,5,5,10,10,20);
    }

    @Test
    void convertCashRegisterMapToArrayShouldTakeValuesFromRegisterMapAndPlaceThemIntoList2() {
        Map<Currency, Integer> register = new HashMap<>();
        register.put(Currency.TWENTY, Integer.valueOf(1));
        register.put(Currency.TEN, Integer.valueOf(0));
        register.put(Currency.FIVE, Integer.valueOf(3));
        register.put(Currency.TWO, Integer.valueOf(4));
        register.put(Currency.ONE, Integer.valueOf(0));

        final int[] result = cashRegister.convertCashRegisterToArray(register);

        assertThat(result).containsExactlyInAnyOrder(2,2,2,2,5,5,5,20);
    }
}
